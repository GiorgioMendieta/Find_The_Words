* {
    color: white;
    font-family: Arial, Helvetica, sans-serif;
}

body {
    background-color: #121213;
    /* Variable font size (Responsive) */
    /* Min size,  Default, Max */
    font-size: clamp(0.8rem, 2.5vmin, 1.5rem);
}

.header-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    border-bottom: solid 1px #3a3a3c;
}

.title-container {
    text-align: center;
    flex-grow: 1;
    width: auto;
}

.menu-right {
    margin-left: auto;
    align-items: center;
}

.menu-left {
    margin-right: auto;
    align-items: center;
}

.menu-button {
    background-color: transparent;
    border: none;
    font-size: inherit;
    justify-content: center;
}

/* Main container for the game */
.game-container {
    /* 90% of viewport */
    /* height: 90vh;  */
    /* Flexbox */
    display: flex;
    /* Stack flex elements in a column */
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
}

/* TODO: Switch to flexbox instead of grid */
.keyboard-row {
    display: grid;
    /* There are 10 keys per row, however we will take half a key (spacer) 
    as our unitary size and then double it */
    grid-template-columns: repeat(20, minmax(1em, 1.5em));
    /* Height of buttons */
    grid-auto-rows: 4em;
    justify-content: center;
    /* Same as margin-left of .key */
    margin-bottom: 0.4em;
}

.key {
    /* Inherit font size from parent <body> to make it responsive */
    font-size: inherit;
    font-weight: bold;
    /* Use HSL to change lightness on hover and when a key is not available */
    background-color: hsl(var(--hue, 198),
            var(--saturation, 1%),
            /* Perform a calculation to add a lightness offset (default = 0%) */
            var(--lightness, 51%));
    /* Every key is two-columns wide (From .keyboard-row # of grid columns */
    grid-column: span 2;
    border: none;
    padding: 0%;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    border-radius: 0.25em;
    /* Same as margin-bottom of .keyboard-row */
    margin-right: 0.4em;
    cursor: pointer;
    /* Prevent the user from highlighting the button text */
    user-select: none;
    /* Remove ugly blue highlight on mobile */
    -webkit-tap-highlight-color: transparent;
}

.key.large {
    grid-column: span 3;
}

/* Reduce the key's lightness when it's wrong */
.key.wrong {
    --lightness: 23%;
}

/* Change the key's color to yellow if it's present */
/* (Overwrites .key.wrong) */
.key.present {
    --hue: 50;
    --saturation: 51%;
    --lightness: 47%;
}

/* Change the key's color to green if it's correct */
/* (Overwrites .key.present) */
.key.correct {
    --hue: 115;
    --saturation: 29%;
    --lightness: 43%;
}

/* Increase the key's lightness when it's hovered */
/* Uses the current lightness as base and adds to it */
.key:hover,
.key:focus {
    filter: brightness(115%);
}

/* Remove last key margin */
.key:last-of-type {
    /* margin-right: 0; */
}

.guess-grid-container {
    display: flex;
    align-items: center;
    flex-grow: 1;
    margin: 1em;
}

.guess-grid {
    display: grid;
    grid-template-rows: repeat(var(--rows, 6), 1fr);
    /* Gap between rows */
    gap: 0.25em;
}

.guess-row {
    display: grid;
    /* 4em column width */
    grid-template-columns: repeat(var(--letters, 5), 4em);
    grid-auto-rows: 4em;
    /* Gap between columns */
    gap: inherit;
}

.guess-row.shake {
    animation: shake 250ms ease-in-out;
}

/* Need to add keyframes manually */
@keyframes shake {
    10% {
        transform: translateX(-3%);
    }

    30% {
        transform: translateX(3%);
    }

    50% {
        transform: translateX(-6%);
    }

    70% {
        transform: translateX(6%);
    }

    90% {
        transform: translateX(-3%);
    }

    100% {
        transform: translateX(0%);
    }
}

.tile {
    font-size: 2em;
    font-weight: bold;
    border: .075em solid hsl(240, 2%, 23%);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    user-select: none;

    /* Flip animation */
    transition: transform 250ms linear;
}

/* Active tile (Has data in it) */
.tile[data-state="active"] {
    border-color: hsl(240, 2%, 33%);
}

/* Wrong tile */
.tile[data-state="wrong"] {
    border: none;
    background-color: #3A3A3C;
}

/* Present tile */
.tile[data-state="present"] {
    border: none;
    background-color: #B59F3B;
}

/* Correct tile */
.tile[data-state="correct"] {
    border: none;
    background-color: #538D4E;
}

.tile.flip {
    transform: rotateX(90deg);
}

.tile.pop {
    animation: pop 200ms linear;
}

@keyframes pop {
    50% {
        transform: scale(1.2);
    }
}

.tile.jump {
    animation: jump 500ms linear;
}

@keyframes jump {
    20% {
        transform: translateY(-50%);
    }

    40% {
        transform: translateY(5%);
    }

    60% {
        transform: translateY(-25%);
    }

    80% {
        transform: translateY(2.5%);
    }

    90% {
        transform: translateY(-5%);
    }

    100% {
        transform: translateY(0%);
    }
}

.alert-container {
    position: fixed;
    /* 10% of viewport height */
    top: 10vh;
    /* 50% of viewport width */
    /* left: 50vh; */
    /* transform: translateX(-50%); */
    /* Always place alert on top */
    z-index: 1;
    /* Display alerts in flexbox vertically */
    display: flex;
    flex-direction: column;
    align-items: center;
}

.alert {
    background-color: #FFFFFF;
    color: #121213;
    font-weight: bold;
    text-align: center;
    padding: 0.75em;
    border-radius: 0.25em;
    /* Prevent selecting the alert */
    pointer-events: none;
    /* Used for hiding alert */
    opacity: 100%;
    transition: opacity 500ms ease-in-out;
    margin-bottom: 0.5em;
}

.alert.hide {
    opacity: 0%;
}