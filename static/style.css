:root {
    font-size: 1vh;
    --header-height: 5em;
    --tile-size: 4em;
    --key-margin: 0.45em;

    --color-bg: #121212;
    --color-font: white;

    --key-bg: #818384;
    --input-bg: #818384;

    /* Tile colors */
    --tile-absent: #393A3C;
    --tile-active: #565758;
    --tile-wrong: #3A3A3C;
    --tile-present: #B59F3B;
    --tile-correct: #538D4E;

    /* Toggle switch */
    --toggle-height: 2em;
    --toggle-width: 4em;
}

.light {
    --color-bg: #ffffff;
    --color-font: black;

    --key-bg: #D4D6DA;

    --tile-absent: #D4D6DA;
    --tile-active: #888A8D;
    --tile-wrong: #787C7E;
}

/* Selects ALL elements */
* {
    color: var(--color-font);
}

body {
    font-family: Arial, Helvetica, sans-serif;
    background-color: var(--color-bg);
    /* Variable font size (Responsive) */
    /* Min size,  Default, Max */
    font-size: clamp(0.5rem, 1.5vh, 2.5rem);
}

.header-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    border-bottom: solid 1px #3a3a3c;
    height: var(--header-height);
}

.title-container {
    font-family: 'Silkscreen', cursive;
    text-align: center;
    flex-grow: 1;
    width: auto;
}

.menu {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 1em;
}

.board-options {
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 0.25em;
    margin-bottom: 0.25em;
}

.board-options>div {
    display: inherit;
    flex-direction: row;
    align-items: center;
}

.board-options>div>p {
    margin: 0 0.5em;
}

.num-slider {
    width: 10em;
    /* appearance: none; */
    /* background: #538D4E; */
}

.menu-button {
    background-color: var(--color-bg);
    border: solid 1px #3a3a3c;
    border-radius: 0.25em;
    padding: 0.5em;
    font-size: inherit;
    justify-content: center;
}

.menu-button:hover {
    filter: brightness(150%);
}

/* Main container for the game */
.game-container {
    height: calc(100vh - var(--header-height));
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 500px;
    /* No vertical margin, fill horizontal margin */
    margin: 0 auto;
}

/* ---------------------- Keyboard ---------------------- */
.keyboard-container {
    font-size: medium;
    margin: 0 var(--key-margin);
    /* Use all the width available */
    width: 100%;
}

.keyboard-row {
    display: flex;
    flex-direction: row;
    justify-content: center;
    margin-bottom: var(--key-margin);
}

.key {
    font-size: inherit;
    font-weight: bold;
    background-color: var(--key-bg);
    display: flex;
    /* Unit size */
    flex: 1;
    height: 4em;
    border: none;
    padding: 0%;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    border-radius: 0.25em;
    margin-right: var(--key-margin);
    cursor: pointer;
    /* Prevent the user from highlighting the button text */
    user-select: none;
    /* Remove ugly blue highlight on mobile */
    -webkit-tap-highlight-color: transparent;
}

.key.large {
    /* Large keys are 1.5 width */
    flex: 1.5;
    /* Smaller font size so letters can fit */
    font-size: 0.8em;
    height: inherit;
}

.spacer {
    /* Spacers take half a key width */
    flex: 0.5;
}

/* Wrong key */
.key[data-state="wrong"] {
    background-color: var(--tile-wrong);
    color: white;
}

/* Present key */
.key[data-state="present"] {
    background-color: var(--tile-present);
    color: white;
}

/* Correct key */
.key[data-state="correct"] {
    background-color: var(--tile-correct);
    color: white;
}

/* Increase the key's lightness when it's hovered */
/* Uses the current lightness as base and adds to it */
.key:hover,
.key:focus {
    filter: brightness(115%);
}

/* Remove last key margin */
.key:last-of-type {
    margin-right: 0;
}

/* ---------------------- Game board ---------------------- */
.guess-grid-container {
    font-family: 'Silkscreen', cursive;

    display: flex;
    align-items: center;
    flex-grow: 1;
    margin: 1em;
}

.guess-grid {
    display: grid;
    grid-template-rows: repeat(var(--rows, 6), 1fr);
    /* Gap between rows */
    gap: 0.25em;
    width: 100%;
    margin: auto;
}

.guess-row {
    display: grid;
    /* column width */
    grid-template-columns: repeat(var(--letters, 5), var(--tile-size));
    /* row height */
    grid-auto-rows: var(--tile-size);
    /* Gap between columns */
    gap: inherit;
}

.guess-row.shake {
    animation: shake 250ms ease-in-out;
}

/* Need to add keyframes manually */
@keyframes shake {
    10% {
        transform: translateX(-3%);
    }

    30% {
        transform: translateX(3%);
    }

    50% {
        transform: translateX(-6%);
    }

    70% {
        transform: translateX(6%);
    }

    90% {
        transform: translateX(-3%);
    }

    100% {
        transform: translateX(0%);
    }
}

.tile {
    font-size: calc(var(--tile-size)/2);
    font-weight: bold;
    border: .075em solid var(--tile-absent);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    user-select: none;
    color: white;
    /* Flip animation */
    transition: transform 250ms linear;
}

/* Active tile (Has data in it) */
.tile[data-state="active"] {
    color: var(--color-font);
    border-color: var(--tile-active);
}

/* Wrong tile */
.tile[data-state="wrong"] {
    border: none;
    background-color: var(--tile-wrong);
}

/* Present tile */
.tile[data-state="present"] {
    border: none;
    background-color: var(--tile-present);
}

/* Correct tile */
.tile[data-state="correct"] {
    border: none;
    background-color: var(--tile-correct);
}

.tile.flip {
    transform: rotateX(90deg);
}

.tile.pop {
    animation: pop 200ms linear;
}

@keyframes pop {
    50% {
        transform: scale(1.2);
    }
}

.tile.jump {
    animation: jump 500ms linear;
}

@keyframes jump {
    20% {
        transform: translateY(-50%);
    }

    40% {
        transform: translateY(5%);
    }

    60% {
        transform: translateY(-25%);
    }

    80% {
        transform: translateY(2.5%);
    }

    90% {
        transform: translateY(-5%);
    }

    100% {
        transform: translateY(0%);
    }
}

/* ---------------------- Toast notifications ---------------------- */
.alert-container {
    position: fixed;
    /* 10% of viewport height */
    top: 10vh;
    /* 50% of viewport width */
    /* left: 50vh; */
    /* transform: translateX(-50%); */
    /* Always place alert on top */
    z-index: 1;
    /* Display alerts in flexbox vertically */
    display: flex;
    flex-direction: column;
    align-items: center;
}

.alert {
    background-color: #FFFFFF;
    color: #121213;
    font-weight: bold;
    text-align: center;
    padding: 0.75em;
    border-radius: 0.25em;
    /* Prevent selecting the alert */
    pointer-events: none;
    /* Used for hiding alert */
    opacity: 100%;
    transition: opacity 500ms ease-in-out;
    margin-bottom: 0.5em;
}

.alert.error {
    background-color: red;
    color: white;
}

.alert.hide {
    opacity: 0%;
}

/* ---------------------- Toggle switch ---------------------- */
/* Hide checkbox */
input[type=checkbox] {
    height: 0;
    width: 0;
    visibility: hidden;
}

label {
    cursor: pointer;
    text-indent: -9999px;
    width: var(--toggle-width);
    height: var(--toggle-height);
    background: var(--tile-wrong);
    display: block;
    border-radius: var(--toggle-height);
    position: relative;
}

label:after {
    content: "";
    position: absolute;
    /* top: 5px; */
    top: calc(var(--toggle-height)*0.05);
    /* left: 5px; */
    left: calc(var(--toggle-height)*0.05);
    /* width: 90px; */
    width: calc(var(--toggle-height)*0.9);
    /* height: 90px; */
    height: calc(var(--toggle-height)*0.9);
    background: #fff;
    /* border-radius: 90px; */
    border-radius: calc(var(--toggle-height)*0.9);
    transition: 0.3s;
}

input:checked+label {
    background: var(--tile-correct);
}

input:checked+label:after {
    /* left: calc(100% - 5px); */
    left: calc(100% - (var(--toggle-height)*0.05));
    transform: translateX(-100%);
}

label:active:after {
    /* width: 130px; */
    width: calc(var(--toggle-height)*1.3);
}